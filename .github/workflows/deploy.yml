# This workflow builds the Docker image for the Todo-App and then deploys the application.
name: Publish Todo-App

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

on:
  push:
    paths:
      - "application/**"
      - "cdk/**/*Service*"
      - "cdk/pom.xml"
      - ".github/workflows/04-publish-todo-app.yml"
  workflow_dispatch:
jobs:
  build-and-publish:
    runs-on: ubuntu-20.04
    name: Build and publish Todo App
    outputs:
      dockerImageTag: ${{ steps.dockerImageTag.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17
          cache: "maven"

      - name: Build application
        working-directory: application
        run: ./mvnw package

      - name: Create Docker image tag
        id: dockerImageTag
        run: echo "tag=$(date +'%Y%m%d%H%M%S')-${GITHUB_SHA}" >> $GITHUB_OUTPUT

      - name: Publish Docker image to ECR registry
        if: github.ref == 'refs/heads/master'
        env:
          DOCKER_IMAGE_TAG: ${{ steps.dockerImageTag.outputs.tag }}
        working-directory: application
        run: |
          docker build -t todo-app .
          docker tag todo-app ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/todo-app:${DOCKER_IMAGE_TAG}
          docker tag todo-app ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/todo-app:latest
          aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/todo-app:${DOCKER_IMAGE_TAG}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/todo-app:latest

  deploy:
    runs-on: ubuntu-20.04
    name: Deploy Todo App
    needs: build-and-publish
    timeout-minutes: 15
    if: github.ref == 'refs/heads/master'
    concurrency: todo-application-deployment
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: 17
          cache: "maven"

      - name: NPM install
        working-directory: cdk
        run: npm install

      - name: Deploy service stack
        working-directory: cdk
        run: |
          echo "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/todo-app"
          echo ${{ needs.build-and-publish.outputs.dockerImageTag }}
          npm run service:deploy -- -c dockerImageUrl="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/todo-app" dockerImageTag=${{ needs.build-and-publish.outputs.dockerImageTag }}

      # Each Service stack updates creates a new parameter stack that CloudFormation does not clean up for us.
      # This step deletes all "*Service-Parameters*" stacks except the latest one to keep the house clean.
      - name: Clean up old parameter stacks
        working-directory: cdk
        run: |
          aws cloudformation describe-stacks --region ${AWS_REGION} --query "Stacks[].StackName" --output text | sed -e "s/\s\+/\n/g" | grep -e "staging-todo-app-Service-Parameters" | sort -r | tail -n+2 > stacks_to_be_deleted.txt
          for stack in $(cat stacks_to_be_deleted.txt); do aws cloudformation delete-stack --stack-name $stack --region ${AWS_REGION};  done
